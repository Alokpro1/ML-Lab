import math
from matplotlib import cm
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt
import numpy as np

def gaussian_pdf(domain, mx,my,stdx,stdy,p):
  X = np.linspace(-10,10,500)
  Y = np.linspace(-10,10,500)
  x, y = np.meshgrid(X, Y)
  R = np.exp(-(((x-mx)/stdx)**2-2*p*((x-mx)/stdx)*((y-mx)/stdy)+((y-mx)/stdy)**2)/(2*(1-p*p)))
  Z=R/(2*3.14*stdx*stdy*math.sqrt(1-p*p))
  return x+mx, y+my, Z

def gaussian_plt(x, y, z):
  fig = plt.figure(figsize=(12, 6))
  ax = fig.gca(projection='3d')
  ax.plot_surface(x, y, z, 
                  cmap=cm.coolwarm,
                  linewidth=0, 
                  antialiased=True)
  ax.set_xlabel('x')
  ax.set_ylabel('y')
  ax.set_zlabel('z');
  plt.show()

S=[[1,1,0],[0.2,0.2,0],[2,2,0],[0.2,2,0],[2,0.2,0],[1,1,0.5],[0.3,2,0.5],[0.3,2,-0.5]]

for s in S:
    p=((s[2]*s[2])/(s[0]*s[1]))
    gaussian_plt(*gaussian_pdf(6,0,0,np.sqrt(s[0]),np.sqrt(s[1]),p))

